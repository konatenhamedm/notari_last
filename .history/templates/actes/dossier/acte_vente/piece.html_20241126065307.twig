{% block page_content %}

{% form_theme form 'widget/fields-block.html.twig' %}

{% from '_macros/piece.html.twig' import prototype_piece %}
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body form-card">
                {{ form_start(form, {'attr': {'role':'form', 'class': 'form', 'id': route_without_prefix}}) }}
                {{ include('_includes/ajax/response.html.twig') }}
                <h3 style="color: orangered">Vérification des pieces</h3>
                <br>
                
                <br>
                 
                {{ prototype_piece(form) }}
                
                <div class="row">
                    <div class="col-xl-12">
                        <div class="text-right">
                            {{ form_widget(form.save) }}
                            {% if form.next is defined %}
                            {{ form_widget(form.next) }}
                            {% endif %}
                        </div>
                    </div>
                </div>
                {{ form_end(form) }}
            </div>
        </div>
    </div>
</div>
{% endblock %}
{% block javascripts %}
<script>


        function getTotal(){
                let total = 0;
                $("#exampleModalSizeSm2").find('.input-mnt').each(function(e){
                 const $this = $(this);
                                //somme = somme +parseInt($this.val())
                  total = total + parseInt($this.val().replaceAll(' ', ''));
                 })

               $("#exampleModalSizeSm2").find('.col-total').html(total)
        }
      $("#exampleModalSizeSm2").find('.input-mnt').on('input', function (e, val, element) {
                      
                        total = 0;
                    $("#exampleModalSizeSm2").find('.input-mnt').each(function(e){
                    const $this = $(this);
                        //somme = somme +parseInt($this.val())
                        total = total + parseInt($this.val().replaceAll(' ', ''));
                    })

            

                        $("#exampleModalSizeSm2").find('.col-total').html(total)
            
                })
     
    
    $(function () {
        init_select2(null, null, '.form-card');
    });
    $(function () {
getTotal();

        const $container = $('.proto-container');

        var index = $container.find('.row-colonne').length;


        $(document).on('select2:select', '.select-type', function (e) {
            const $this = $(this);
            let field_str = $this.find('option:selected').attr('data-require-fields');
            const $parent = $this.closest('.row-colonne');
            let fields = [];
            if (typeof field_str != 'undefined') {
                fields = field_str.split(',');
                for (let field of fields) {
                    $parent.find('.' + field).removeClass('d-none');
                }
            } else {
                $parent.find('.source,.valeurs').addClass('d-none');
            }
        });


        const $addLink = $('.add_line');
        $addLink.click(function (e) {
            const $this = $(this);
            const proto_class = $this.attr('data-protoclass');
            const name = $this.attr('data-protoname');
            const $container = $($this.attr('data-container'));


            addLine($container, name, proto_class);

/*    init_select2($this, null, '#exampleModalSizeSm2'); */


            e.preventDefault(); // évite qu'un # apparaisse dans l'URL
        });

        if (index > 0) {
            $container.children('.row-colonne').each(function () {
                const $this = $(this);
                addDeleteLink($this);
                const $select = $this.find("select");



                $select.each(function () {
                    const $this = $(this);
                    init_select2($this, null, '#exampleModalSizeSm2');
                    if ($this.hasClass('select-type')) {
                        let field_str = $this.find('option:selected').attr('data-require-fields');
                        const $parent = $this.closest('.row-colonne');
                        let fields = [];
                        if (typeof field_str != 'undefined') {
                            fields = field_str.split(',');
                            for (let field of fields) {
                                $parent.find('.' + field).removeClass('d-none');
                            }
                        } else {
                            $parent.find('.source,.valeurs').addClass('d-none');
                        }
                    }
                });

            });

        }




        // La fonction qui ajoute un formulaire Categorie
        function addLine($container, name, proto_class) {
            // Dans le contenu de l'attribut « data-prototype », on remplace :
            // - le texte "__name__label__" qu'il contient par le label du champ
            // - le texte "__name__" qu'il contient par le numéro du champ

            var $prototype = $($(proto_class).attr('data-prototype')
                .replace(new RegExp(name + 'label__', 'g'), 'Colonne ' + (index + 1))
                .replace(new RegExp(name, 'g'), index));


            init_select2($prototype.find('select'), null, '#exampleModalSizeSm2');
               /* init_select2($this, null, '#exampleModalSizeSm2'); */


            // On ajoute au prototype un lien pour pouvoir supprimer la prestation
            addDeleteLink($prototype, name);
            // On ajoute le prototype modifié à la fin de la balise <div>
            $container.append($prototype);

            index++;
        }


        function addDeleteLink($prototype, name = null) {
            // Création du lien
            $deleteLink = $('<a href="#" class="btn btn-danger btn-xs"><span class="fa fa-trash"></span></a>');
            // Ajout du lien
            $prototype.find(".del-col").append($deleteLink);



            // Ajout du listener sur le clic du lien
            $deleteLink.click(function (e) {
                const $this = $(this);
                const $parent = $(this).closest('.row-colonne');
                //console.log($(this).attr('data-parent'), $(this));
                $parent.remove();

                if (index > 0) {
                    index -= 1;
                }

                e.preventDefault(); // évite qu'un # apparaisse dans l'URL
            });
        }



    })
</script>
{% endblock %}